// qsyntaxhighlighter.sip generated by MetaSIP on Sun Jun 16 16:09:29 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QSyntaxHighlighter : QObject
{
%TypeHeaderCode
#include <qsyntaxhighlighter.h>
%End

public:
%If (- Qt_5_0_0)
    QSyntaxHighlighter(QTextEdit *parent /TransferThis/);
%End
%If (Qt_5_0_0 -)
    explicit QSyntaxHighlighter(QTextDocument *parent /TransferThis/);
%End
%If (- Qt_5_0_0)
    QSyntaxHighlighter(QTextDocument *parent /TransferThis/);
%End
%If (Qt_5_0_0 -)
    explicit QSyntaxHighlighter(QObject *parent /TransferThis/);
%End
%If (- Qt_5_0_0)
    QSyntaxHighlighter(QObject *parent /TransferThis/);
%End
    virtual ~QSyntaxHighlighter();
    void setDocument(QTextDocument *doc /KeepReference=17/);
    QTextDocument *document() const;

public slots:
%If (Qt_4_2_0 -)
    void rehighlight();
%End
%If (Qt_4_6_0 -)
    void rehighlightBlock(const QTextBlock &block);
%End

protected:
    virtual void highlightBlock(const QString &text) = 0;
    void setFormat(int start, int count, const QTextCharFormat &format);
    void setFormat(int start, int count, const QColor &color);
    void setFormat(int start, int count, const QFont &font);
    QTextCharFormat format(int pos) const;
    int previousBlockState() const;
    int currentBlockState() const;
    void setCurrentBlockState(int newState);
    void setCurrentBlockUserData(QTextBlockUserData *data /GetWrapper/);
%MethodCode
        // Ownership of the user data is with the document not the text block.
        QTextDocument *td = sipCpp->document();
        
        if (td)
        {
            PyObject *td_obj = sipConvertFromType(td, sipType_QTextDocument, 0);
        
            if (td_obj)
            {
                sipTransferTo(a0Wrapper, td_obj);
        
                // Also keep a reference to the document as this may be the first time
                // that Python has seen it.
                sipKeepReference(sipSelf, 17, td_obj);
        
                Py_DECREF(td_obj);
            }
        }
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipCpp->setCurrentBlockUserData(a0);
        #else
        sipCpp->sipProtect_setCurrentBlockUserData(a0);
        #endif
%End

    QTextBlockUserData *currentBlockUserData() const;
%If (Qt_4_4_0 -)
    QTextBlock currentBlock() const;
%End

private:
    QSyntaxHighlighter(const QSyntaxHighlighter &);
};
